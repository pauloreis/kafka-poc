/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.filas.kafka.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AuditorAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3148651475371697639L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuditorAvro\",\"namespace\":\"com.filas.kafka.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Id do Auditor\"},{\"name\":\"transactionId\",\"type\":\"string\",\"doc\":\"UUID do Auditor\"},{\"name\":\"qtd\",\"type\":\"int\",\"doc\":\"Qtd Cartelas\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AuditorAvro> ENCODER =
      new BinaryMessageEncoder<AuditorAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuditorAvro> DECODER =
      new BinaryMessageDecoder<AuditorAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AuditorAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AuditorAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AuditorAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AuditorAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AuditorAvro from a ByteBuffer. */
  public static AuditorAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id do Auditor */
  @Deprecated public long id;
  /** UUID do Auditor */
  @Deprecated public java.lang.CharSequence transactionId;
  /** Qtd Cartelas */
  @Deprecated public int qtd;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuditorAvro() {}

  /**
   * All-args constructor.
   * @param id Id do Auditor
   * @param transactionId UUID do Auditor
   * @param qtd Qtd Cartelas
   */
  public AuditorAvro(java.lang.Long id, java.lang.CharSequence transactionId, java.lang.Integer qtd) {
    this.id = id;
    this.transactionId = transactionId;
    this.qtd = qtd;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return transactionId;
    case 2: return qtd;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: transactionId = (java.lang.CharSequence)value$; break;
    case 2: qtd = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Id do Auditor
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Id do Auditor
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return UUID do Auditor
   */
  public java.lang.CharSequence getTransactionId() {
    return transactionId;
  }

  /**
   * Sets the value of the 'transactionId' field.
   * UUID do Auditor
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'qtd' field.
   * @return Qtd Cartelas
   */
  public java.lang.Integer getQtd() {
    return qtd;
  }

  /**
   * Sets the value of the 'qtd' field.
   * Qtd Cartelas
   * @param value the value to set.
   */
  public void setQtd(java.lang.Integer value) {
    this.qtd = value;
  }

  /**
   * Creates a new AuditorAvro RecordBuilder.
   * @return A new AuditorAvro RecordBuilder
   */
  public static com.filas.kafka.model.AuditorAvro.Builder newBuilder() {
    return new com.filas.kafka.model.AuditorAvro.Builder();
  }

  /**
   * Creates a new AuditorAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuditorAvro RecordBuilder
   */
  public static com.filas.kafka.model.AuditorAvro.Builder newBuilder(com.filas.kafka.model.AuditorAvro.Builder other) {
    return new com.filas.kafka.model.AuditorAvro.Builder(other);
  }

  /**
   * Creates a new AuditorAvro RecordBuilder by copying an existing AuditorAvro instance.
   * @param other The existing instance to copy.
   * @return A new AuditorAvro RecordBuilder
   */
  public static com.filas.kafka.model.AuditorAvro.Builder newBuilder(com.filas.kafka.model.AuditorAvro other) {
    return new com.filas.kafka.model.AuditorAvro.Builder(other);
  }

  /**
   * RecordBuilder for AuditorAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuditorAvro>
    implements org.apache.avro.data.RecordBuilder<AuditorAvro> {

    /** Id do Auditor */
    private long id;
    /** UUID do Auditor */
    private java.lang.CharSequence transactionId;
    /** Qtd Cartelas */
    private int qtd;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.filas.kafka.model.AuditorAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[1].schema(), other.transactionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qtd)) {
        this.qtd = data().deepCopy(fields()[2].schema(), other.qtd);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AuditorAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.filas.kafka.model.AuditorAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[1].schema(), other.transactionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qtd)) {
        this.qtd = data().deepCopy(fields()[2].schema(), other.qtd);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Id do Auditor
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Id do Auditor
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.filas.kafka.model.AuditorAvro.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Id do Auditor
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Id do Auditor
      * @return This builder.
      */
    public com.filas.kafka.model.AuditorAvro.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * UUID do Auditor
      * @return The value.
      */
    public java.lang.CharSequence getTransactionId() {
      return transactionId;
    }

    /**
      * Sets the value of the 'transactionId' field.
      * UUID do Auditor
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.filas.kafka.model.AuditorAvro.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.transactionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * UUID do Auditor
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * UUID do Auditor
      * @return This builder.
      */
    public com.filas.kafka.model.AuditorAvro.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'qtd' field.
      * Qtd Cartelas
      * @return The value.
      */
    public java.lang.Integer getQtd() {
      return qtd;
    }

    /**
      * Sets the value of the 'qtd' field.
      * Qtd Cartelas
      * @param value The value of 'qtd'.
      * @return This builder.
      */
    public com.filas.kafka.model.AuditorAvro.Builder setQtd(int value) {
      validate(fields()[2], value);
      this.qtd = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'qtd' field has been set.
      * Qtd Cartelas
      * @return True if the 'qtd' field has been set, false otherwise.
      */
    public boolean hasQtd() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'qtd' field.
      * Qtd Cartelas
      * @return This builder.
      */
    public com.filas.kafka.model.AuditorAvro.Builder clearQtd() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuditorAvro build() {
      try {
        AuditorAvro record = new AuditorAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.transactionId = fieldSetFlags()[1] ? this.transactionId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.qtd = fieldSetFlags()[2] ? this.qtd : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuditorAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuditorAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuditorAvro>
    READER$ = (org.apache.avro.io.DatumReader<AuditorAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
