/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.filas.kafka.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PessoaAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7857544587117219275L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PessoaAvro\",\"namespace\":\"com.filas.kafka.model\",\"fields\":[{\"name\":\"nome\",\"type\":\"string\",\"doc\":\"Nome da Pessoa\"},{\"name\":\"sobreNome\",\"type\":\"string\",\"doc\":\"Sobre Nome da Pessoa\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PessoaAvro> ENCODER =
      new BinaryMessageEncoder<PessoaAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PessoaAvro> DECODER =
      new BinaryMessageDecoder<PessoaAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PessoaAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PessoaAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PessoaAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PessoaAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PessoaAvro from a ByteBuffer. */
  public static PessoaAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Nome da Pessoa */
  @Deprecated public java.lang.CharSequence nome;
  /** Sobre Nome da Pessoa */
  @Deprecated public java.lang.CharSequence sobreNome;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PessoaAvro() {}

  /**
   * All-args constructor.
   * @param nome Nome da Pessoa
   * @param sobreNome Sobre Nome da Pessoa
   */
  public PessoaAvro(java.lang.CharSequence nome, java.lang.CharSequence sobreNome) {
    this.nome = nome;
    this.sobreNome = sobreNome;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nome;
    case 1: return sobreNome;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nome = (java.lang.CharSequence)value$; break;
    case 1: sobreNome = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nome' field.
   * @return Nome da Pessoa
   */
  public java.lang.CharSequence getNome() {
    return nome;
  }

  /**
   * Sets the value of the 'nome' field.
   * Nome da Pessoa
   * @param value the value to set.
   */
  public void setNome(java.lang.CharSequence value) {
    this.nome = value;
  }

  /**
   * Gets the value of the 'sobreNome' field.
   * @return Sobre Nome da Pessoa
   */
  public java.lang.CharSequence getSobreNome() {
    return sobreNome;
  }

  /**
   * Sets the value of the 'sobreNome' field.
   * Sobre Nome da Pessoa
   * @param value the value to set.
   */
  public void setSobreNome(java.lang.CharSequence value) {
    this.sobreNome = value;
  }

  /**
   * Creates a new PessoaAvro RecordBuilder.
   * @return A new PessoaAvro RecordBuilder
   */
  public static com.filas.kafka.model.PessoaAvro.Builder newBuilder() {
    return new com.filas.kafka.model.PessoaAvro.Builder();
  }

  /**
   * Creates a new PessoaAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PessoaAvro RecordBuilder
   */
  public static com.filas.kafka.model.PessoaAvro.Builder newBuilder(com.filas.kafka.model.PessoaAvro.Builder other) {
    return new com.filas.kafka.model.PessoaAvro.Builder(other);
  }

  /**
   * Creates a new PessoaAvro RecordBuilder by copying an existing PessoaAvro instance.
   * @param other The existing instance to copy.
   * @return A new PessoaAvro RecordBuilder
   */
  public static com.filas.kafka.model.PessoaAvro.Builder newBuilder(com.filas.kafka.model.PessoaAvro other) {
    return new com.filas.kafka.model.PessoaAvro.Builder(other);
  }

  /**
   * RecordBuilder for PessoaAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PessoaAvro>
    implements org.apache.avro.data.RecordBuilder<PessoaAvro> {

    /** Nome da Pessoa */
    private java.lang.CharSequence nome;
    /** Sobre Nome da Pessoa */
    private java.lang.CharSequence sobreNome;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.filas.kafka.model.PessoaAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nome)) {
        this.nome = data().deepCopy(fields()[0].schema(), other.nome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sobreNome)) {
        this.sobreNome = data().deepCopy(fields()[1].schema(), other.sobreNome);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PessoaAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.filas.kafka.model.PessoaAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.nome)) {
        this.nome = data().deepCopy(fields()[0].schema(), other.nome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sobreNome)) {
        this.sobreNome = data().deepCopy(fields()[1].schema(), other.sobreNome);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'nome' field.
      * Nome da Pessoa
      * @return The value.
      */
    public java.lang.CharSequence getNome() {
      return nome;
    }

    /**
      * Sets the value of the 'nome' field.
      * Nome da Pessoa
      * @param value The value of 'nome'.
      * @return This builder.
      */
    public com.filas.kafka.model.PessoaAvro.Builder setNome(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.nome = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nome' field has been set.
      * Nome da Pessoa
      * @return True if the 'nome' field has been set, false otherwise.
      */
    public boolean hasNome() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nome' field.
      * Nome da Pessoa
      * @return This builder.
      */
    public com.filas.kafka.model.PessoaAvro.Builder clearNome() {
      nome = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sobreNome' field.
      * Sobre Nome da Pessoa
      * @return The value.
      */
    public java.lang.CharSequence getSobreNome() {
      return sobreNome;
    }

    /**
      * Sets the value of the 'sobreNome' field.
      * Sobre Nome da Pessoa
      * @param value The value of 'sobreNome'.
      * @return This builder.
      */
    public com.filas.kafka.model.PessoaAvro.Builder setSobreNome(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sobreNome = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sobreNome' field has been set.
      * Sobre Nome da Pessoa
      * @return True if the 'sobreNome' field has been set, false otherwise.
      */
    public boolean hasSobreNome() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sobreNome' field.
      * Sobre Nome da Pessoa
      * @return This builder.
      */
    public com.filas.kafka.model.PessoaAvro.Builder clearSobreNome() {
      sobreNome = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PessoaAvro build() {
      try {
        PessoaAvro record = new PessoaAvro();
        record.nome = fieldSetFlags()[0] ? this.nome : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sobreNome = fieldSetFlags()[1] ? this.sobreNome : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PessoaAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<PessoaAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PessoaAvro>
    READER$ = (org.apache.avro.io.DatumReader<PessoaAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
